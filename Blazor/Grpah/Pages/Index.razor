@page "/"

<div class="container-fluid d-flex flex-column flex-grow-1">
    <div id="control" class="row">
        <div class="col-md-12">
            Node Count: <input type="number" @bind="_nodeCount" min="1" max="50" step="2">
            Edge Probability: <input type="number" @bind="_edgeProbability" min="0.01" max="1.0" step="0.1">
            Population Size: <input type="number" @bind="_populationSize" min="2" max="100" step="10">
            Max Diff Between Node: <input type="number" @bind="_maxDiffBetweenNode" min="1" max="_nodeCount" step="1">
            <button type="button" class="btn btn-primary btn-sm" @onclick=" async ()=> { await  StartAsync(); }">Generate new Graph</button>
            <button type="button" class="btn btn-primary btn-sm" @onclick="async ()=> { await  OnIterationAsync(5); }">Run 5 iteration</button>
            <button type="button" class="btn btn-primary btn-sm" @onclick="async ()=> { await  OnIterationAsync(10); }">Run 10 iteration</button>
            <button type="button" class="btn btn-primary btn-sm" @onclick="async ()=> { await  OnIterationAsync(50); }">Run 50 iteration</button>
        </div>
    </div>
    <div id="graphAndPareto" class="row">
        <div class="col-md-6">
            <GraphChart @ref="_graphChart" ContainerId="graphChartId" />
        </div>
        <div class="col-md-6 d-sm-none d-md-block">
            <CanvasJsChart @ref="_paretoChart" ContainerId="paretoChartId" />
        </div>
    </div>
    <div id="evolution" class="row">
        <div class="col-md-12">
            <CanvasJsChart @ref="_evolutionChart" ContainerId="evolutionChartId" />
        </div>
    </div>
</div>
@code{
    private GraphChart _graphChart;
    private CanvasJsChart _evolutionChart;
    private CanvasJsChart _paretoChart;

    private IGraphData _graphData;
    private IGraphOptions _graphOptions;
    private ICanvasJsConfig _evolutionConfig;
    private ICanvasJsConfig _paretoConfig;

    private void OnIncrementNodeCount()
    {
        _nodeCount++;
    }

    private void OnDecrementNodeCount()
    {
        _nodeCount = _nodeCount - 1 <= 0 ? 1 : _nodeCount - 1;
    }


    private void OnIncrementEdgeProbability()
    {
        _edgeProbability = _edgeProbability + 0.1d > 1d ? 1d : _edgeProbability + 0.1d;
    }

    private void OnDecrementEdgeProbability()
    {
        _edgeProbability = Math.Round(_edgeProbability - 0.1d < 0d ? 0.1d : _edgeProbability - 0.1d, 1);
    }
}
