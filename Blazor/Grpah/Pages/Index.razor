@page "/"

<h5 class="card-header">Graph</h5>
<div class="card-body h-100 d-flex flex-column">
    <div class="row">
        <div class="col-sm-3">
            Node count:
            <button class="btn btn-primary" @onclick="OnDecrementNodeCount">-</button>
            @_nodeCount
            <button class="btn btn-primary" @onclick="OnIncrementNodeCount">+</button>
        </div>
        <div class="col-sm-3">
            Edge Probability:
            <button class="btn btn-primary" @onclick="OnDecrementEdgeProbability">-</button>
            @_edgeProbability
            <button class="btn btn-primary" @onclick="OnIncrementEdgeProbability">+</button>
        </div>
        <div class="col-sm">
            <button class="btn btn-primary" @onclick="OnGenerateGraph">Generate Graph</button>
        </div>
        <div class="col-sm">
            <button class="btn btn-primary" @onclick="OnGraphRender">Render</button>
        </div>
        <div class="col-sm">
            <button class="btn btn-primary" @onclick="OnNext">Next 10</button>
        </div>
    </div>
    <div class="row h-50">
        <div class="col-sm h-100">
            <GraphChart @ref="_graphChart"
                        ContainerId="graphChartId"
                        GraphData="_graphData"
                        GraphOptions="_graphOptions" />
        </div>
        <div class="col-sm h-100">
        </div>
    </div>
    <div class="row h-50">
        <div class="col-sm h-100">
            <CanvasJsChart @ref="_evolutionChart"
                           Config="_evolutionConfig"
                           ContainerId="CanvasJsChart" />
        </div>
    </div>
</div>
@code{
    private void OnIncrementNodeCount()
    {
        _nodeCount++;
    }

    private void OnDecrementNodeCount()
    {
        _nodeCount = _nodeCount - 1 <= 0 ? 1 : _nodeCount - 1;
    }


    private void OnIncrementEdgeProbability()
    {
        _edgeProbability = _edgeProbability + 0.1d > 1d ? 1d : _edgeProbability + 0.1d;
    }

    private void OnDecrementEdgeProbability()
    {
        _edgeProbability = Math.Round(_edgeProbability - 0.1d < 0d ? 0.1d : _edgeProbability - 0.1d, 1);
    }
}
