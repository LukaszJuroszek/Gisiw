@page "/"

<div class="vh-100">
    <div class="row h-50">
        <div class="col-md-6 h-100">
            <div class="col-sm-3">
                Node count:
                <button class="btn btn-primary" @onclick="OnDecrementNodeCount">-</button>
                @_nodeCount
                <button class="btn btn-primary" @onclick="OnIncrementNodeCount">+</button>
            </div>
            <div class="col-sm-3">
                Edge Probability:
                <button class="btn btn-primary" @onclick="OnDecrementEdgeProbability">-</button>
                @_edgeProbability
                <button class="btn btn-primary" @onclick="OnIncrementEdgeProbability">+</button>
            </div>
            <div class="col-sm">
                <button class="btn btn-primary" @onclick=" async ()=> { await  StartAsync(); }">Generate new Graph</button>
            </div>
            <div class="col-sm">
                <button class="btn btn-primary" @onclick="() => { _evolutionChart.RenderAsync(_evolutionConfig); }">Render</button>
            </div>
            <div class="col-sm">
                <button class="btn btn-primary" @onclick="OnIteration" @onclick:stopPropagation="true">Run 100 iteration</button>
            </div>
        </div>
        <div class="col-md-6 h-100">
            <GraphChart @ref="_graphChart" ContainerId="graphChartId" />
        </div>
    </div>
    <div class="row h-50">
        <div class="col-md-12 vh-50">
            <CanvasJsChart @ref="_evolutionChart" ContainerId="CanvasJsChart" />
        </div>
    </div>
</div>
@code{
    private GraphChart _graphChart;
    private CanvasJsChart _evolutionChart;

    private IGraphData _graphData;
    private IGraphOptions _graphOptions;
    private ICanvasJsConfig _evolutionConfig;

    private void OnIncrementNodeCount()
    {
        _nodeCount++;
    }

    private void OnDecrementNodeCount()
    {
        _nodeCount = _nodeCount - 1 <= 0 ? 1 : _nodeCount - 1;
    }


    private void OnIncrementEdgeProbability()
    {
        _edgeProbability = _edgeProbability + 0.1d > 1d ? 1d : _edgeProbability + 0.1d;
    }

    private void OnDecrementEdgeProbability()
    {
        _edgeProbability = Math.Round(_edgeProbability - 0.1d < 0d ? 0.1d : _edgeProbability - 0.1d, 1);
    }
}
