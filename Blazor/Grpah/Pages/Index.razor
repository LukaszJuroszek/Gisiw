@page "/"
@inject IMatrixService MatrixService
@inject IGraphChartService GraphChartService
@inject IGraphConsistentService GraphConsistentService
@inject IPopulationService PopulationService
<h5 class="card-header">Graph</h5>
<div class="card-body h-100 d-flex flex-column">
    <div class="row">
        <div class="col-sm-3">
            Node count:
            <button class="btn btn-primary" @onclick="OnDecrementNodeCount" @ondblclick="OnDecrementDoubleNodeCount">-</button>
            @_nodeCount
            <button class="btn btn-primary" @onclick="OnIncrementNodeCount" @ondblclick="OnIncrementDoubleNodeCount">+</button>
        </div>  
        <div class="col-sm-3">
            Edge Probability:
            <button class="btn btn-primary" @onclick="OnDecrementEdgeProbability">-</button>
            @_edgeProbability
            <button class="btn btn-primary" @onclick="OnIncrementEdgeProbability">+</button>
        </div>
        <div class="col-sm">
            <button class="btn btn-primary" @onclick="OnGenerateGraph">Generate Graph</button>
        </div>
        <div class="col-sm">
            <button class="btn btn-primary" @onclick="OnRender">Render</button>
        </div>
        <div class="col-sm">
            <button class="btn btn-primary" @onclick="OnStart">Start</button>
        </div>
    </div>
    <div class="row h-50">
        <div class="col-sm h-100">
            <GraphChart @ref="_graphChart"
                        GraphData="_graphData"
                        GraphOptions="_graphOptions" />
        </div>
        <div class="col-sm h-100">
        </div>
    </div>
    <div class="row h-50">
        <div class="col-sm h-100">
        </div>
        <div class="col-sm h-100">
        </div>
    </div>
</div>
@code {
    private int _nodeCount;
    private double _edgeProbability;
    private GraphData _graphData;
    private GraphOptions _graphOptions;
    private IMatrix _matrix;
    private GraphChart _graphChart;
    private IPopulation _population;
    private int _populationSize = 100;
    private int _maxDiffBetweenNode = 6;

    protected override void OnInitialized()
    {
        _nodeCount = 10;
        _edgeProbability = 0.55d;
        OnGenerateGraph();
        OnRender();
    }

    private void OnGenerateGraph()
    {
        _matrix = MatrixService.GenerateMatrix(nodeCount: _nodeCount, probability: _edgeProbability);
        _graphData = GraphChartService.GraphDataFromMatrix(_matrix);
        _graphOptions = GraphChartService.GetDefaultGraphOptions();
        _population = PopulationService.Initialize(_matrix, _populationSize, _maxDiffBetweenNode);
        OnRender();
    }

    private void OnIncrementNodeCount()
    {
        _nodeCount++;
    }

    private void OnIncrementDoubleNodeCount()
    {
        _nodeCount += 10;
    }

    private void OnDecrementNodeCount()
    {
        _nodeCount = _nodeCount - 1 <= 0 ? 1 : _nodeCount - 1;
    }

    private void OnDecrementDoubleNodeCount()
    {
        _nodeCount = _nodeCount - 10 <= 0 ? 1 : _nodeCount - 10;
    }

    private void OnIncrementEdgeProbability()
    {
        _edgeProbability = _edgeProbability + 0.1d > 1d ? 1d : _edgeProbability + 0.1d;
    }

    private void OnDecrementEdgeProbability()
    {
        _edgeProbability = Math.Round(_edgeProbability - 0.1d < 0d ? 0.1d : _edgeProbability - 0.1d, 1);
    }

    private async void OnRender()
    {
        await Task.Run(() => _graphChart.Render());
    }

    private async void OnStart()
    {
        await Task.Run(() => _graphChart.Render());
    }
}
